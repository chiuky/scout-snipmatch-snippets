{
  "uuid": "9e435165-81df-4490-9c79-301bb72dca60",
  "name": "updateChildEntity",
  "description": "update a child entity .",
  "extraSearchTerms": [],
  "tags": [],
  "code": "\r\n\r\n\r\n//TODO remove this after inserting\r\n// ${componentname}${cursor} Nome del componente funzionale\r\n// ${entityname}\t Nome dell \u0027 entit√† principale del componenente\r\n// ${EntityChildName} Nome dell \u0027 entity child da updatare iniziante con lettera GRANDE\r\n//  ${entityChildName} Nome dell \u0027 entity child da updatare iniziante con lettera PICCOLA\r\n// ${EntityParentName} Nome dell \u0027 entity parent iniziante con lettera GRANDE \r\n// ${ENTITY_PARENT_FIELD_NAME} Nome del campo dell \u0027 entity padre \r\n \r\npackage com.oneleo.${componentname}.${entityname}.entity.service.internal.action;\r\nimport java.util.Arrays;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport com.ab.ah.scad.acl.dao.SearchCriteria;\r\nimport com.ab.ah.scad.acl.error.ApplicationFailureError;\r\nimport com.ab.ah.scad.acl.error.EntityNotFoundException;\r\nimport com.ab.ah.scad.acl.error.ExecuteException;\r\nimport com.ab.oneleo.common.commonsutil.error.ApplicationFailureErrorCodes;\r\nimport com.oneleo.${componentname}.${entityname}.entity.service.internal.converter.${EntityChildName}TOTo${EntityChildName}Converter;\r\nimport com.oneleo.${componentname}.${entityname}.entity.service.internal.converter.${EntityChildName}To${EntityChildName}TOConverter;\r\nimport com.oneleo.${componentname}.${entityname}.persistence.dao.${EntityChildName}DAO;\r\nimport com.oneleo.${componentname}.${entityname}.persistence.model.jpa.${EntityChildName};\r\nimport com.oneleo.${componentname}.${entityname}.persistence.model.jpa.defaultentity.fields.${EntityParentName}Fields;\r\nimport com.oneleo.${componentname}.${entityname}.persistence.model.jpa.defaultentity.fields.${EntityChildName}Fields;\r\n\r\n/**\r\n * @author aardizio Date : 12/07/2016 \r\n */\r\npublic class ${EntityParentName}Update${EntityChildName}ActionImpl implements ${EntityParentName}Update${EntityChildName}Action {\r\n\r\n    /** The ${EntityChildName}  dao. */\r\n    @Autowired\r\n    private ${EntityChildName}DAO ${entityChildName}DAO;\r\n\r\n    /** The ${entityChildName} to ${EntityChildName} to converter. */\r\n    @Autowired\r\n    private ${EntityChildName}To${EntityChildName}TOConverter ${entityChildName}To${EntityChildName}TOConverter ;\r\n\r\n    /** The ${entityChildName}preference to to ${entityChildName} converter. */\r\n    @Autowired\r\n    private ${EntityChildName}TOTo${EntityChildName}Converter ${entityChildName}TOTo${EntityChildName}Converter;\r\n\r\n\r\n   \r\n    @Override\r\n    public com.oneleo.${componentname}.to.${EntityChildName}TO update${EntityChildName}(com.oneleo.${componentname}.to.${EntityChildName}TO ${entityChildName}TO) throws ExecuteException {\r\n\r\n        validateInput(${entityChildName}TO);\r\n        ${EntityChildName} ${entityChildName}FromDB \u003d find${EntityChildName}(${entityChildName}TO);\r\n\r\n        if (${entityChildName}FromDB !\u003d null) {\r\n            ${EntityChildName} ${entityChildName}ToUpdate \u003d ${entityChildName}TOTo${EntityChildName}Converter.convert(${entityChildName}TO);\r\n            ${entityChildName}ToUpdate.set${EntityParentName}(${entityChildName}FromDB.get${EntityParentName}());\r\n            ${entityChildName}ToUpdate.setId(${entityChildName}FromDB.getId());\r\n            ${entityChildName}DAO.updateDomainEntity(${entityChildName}ToUpdate);\r\n            return ${entityChildName}To${EntityChildName}TOConverter.convert(${entityChildName}ToUpdate);\r\n        } else {\r\n            throw new EntityNotFoundException(new Object[] { \"${entityChildName}\", ${entityChildName}TO.get${EntityParentName}BusinessKey()});\r\n        }\r\n    }\r\n\r\n\r\n\t\r\n    /**\r\n     * Find ${entityname}.\r\n     *\r\n     * @param \r\n     *            the ${entityChildName} preference\r\n     * @return the ${entityChildName} preference\r\n     */\r\n    private ${EntityChildName} find${EntityChildName}(com.oneleo.${componentname}.to.${EntityChildName}TO ${entityChildName}TO) {\r\n        SearchCriteria searchCriteria \u003d new SearchCriteria();\r\n        if (${entityChildName}TO.get${EntityParentName}BusinessKey().getId() !\u003d null) {\r\n            searchCriteria.add(${EntityChildName}Fields.${ENTITY_PARENT_FIELD_NAME} + SearchCriteria.DOT + ${EntityParentName}Fields.ID, ${entityChildName}TO.get${EntityParentName}BusinessKey().getId());\r\n        } else {\r\n            ${searchCriteria}.add(${EntityParentName}PreferenceFields.PATIENT + SearchCriteria.DOT + ${EntityParentName}Fields.CODE,${entityChildName}TO.get${EntityParentName}BusinessKey().getCode());\r\n        }\r\n        return ${entityChildName}DAO.findDomainEntityBySearchCriteria(searchCriteria );\r\n    }\r\n\r\n\r\n\t\r\n\t  /**\r\n     * Validate input.\r\n     *\r\n     * @param \r\n     *            the ${entityname} preference\r\n     * @throws ApplicationFailureError\r\n     *             the application failure error\r\n     */\r\n    private void validateInput(com.oneleo.${componentname}.to.${EntityChildName}TO ${entityChildName}TO) throws ApplicationFailureError {\r\n        if (${entityChildName}TO \u003d\u003d null)\r\n            throw new ApplicationFailureError(ApplicationFailureErrorCodes.ERROR_NULL_OBJECT.getCode(), Arrays.asList(\"${entityChildName}TO\"));\r\n        if (${entityChildName}TO.get${EntityParentName}BusinessKey() \u003d\u003d null)\r\n            throw new ApplicationFailureError(ApplicationFailureErrorCodes.ERROR_BUSINESS_KEY_MISSING.getCode(), Arrays.asList(\"${entityParentName}BusinessKey in ${entityChildName}TO\"));\r\n        if (${entityChildName}TO.get${EntityParentName}BusinessKey().getCode() \u003d\u003d null \u0026\u0026 ${entityChildName}TO.get${EntityParentName}BusinessKey().getId() \u003d\u003d null)\r\n            throw new ApplicationFailureError(ApplicationFailureErrorCodes.ERROR_BUSINESS_KEY_MISSING.getCode(), Arrays.asList(\"${entityParentName}BusinessKey\", \"update ${entityname} preference\"));\r\n    }\r\n}\r\n\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n\r\n",
  "location": "FILE",
  "filenameRestrictions": [],
  "dependencies": []
}